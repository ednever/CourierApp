// <auto-generated />
using API_server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("API_server.Models.Phenomenon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Phenomenon");
                });

            modelBuilder.Entity("API_server.Models.Weather", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AirTemperature")
                        .HasColumnType("TEXT");

                    b.Property<int>("PhenomenonID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WMOCode")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PhenomenonID");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("API_server.Models.Weather", b =>
                {
                    b.HasOne("API_server.Models.Phenomenon", "Phenomenon")
                        .WithMany()
                        .HasForeignKey("PhenomenonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phenomenon");
                });
#pragma warning restore 612, 618
        }
    }
}
